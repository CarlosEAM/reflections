How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	By allowing me to see the text that was and the text that is I was able to visually
compare the two versions of the file. Diff prints the lines of the files which have
change and this a let me see what the mistake or difference was. The bug could be
a spelling error, syntax error or missing text.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Because it will allow me to to easily check for errors by comparing one version
with the other and finding the differences and quickly fix them. I can keep an eye 
on how many stages the file has gone through. All of these can be done with minimal 
efford which will let me spend my time on the coding rather than looknig for bugs.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros - You can make sure commits are not too long or too small.
		 - Commits can be split by logic rather than time.
		 - If work must be interrupted early you can commit then.
	Cons - A commit could be made too early or too late.
		 - Won't be done by logic.
		 - If commit only done per time frames or amount of work done then you could loose data if finished to early.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because control system like Git know that working in a project can involve multiple files.
It allows for easier track of the files that were being worked on at the time of commit.
Multiple file save means you can debug more efficiently because you can see what files were 
changed at the time.


How can you use the commands git log and git diff to view the history of files?

    Use git log to view all the commits made which tell you when the it was made,
the author and the repository if any.
	Use git diff to compare two different commits to check for the actual changes made
between each.
In these ways you can use log and diff to view the history of the files.


How might using version control make you more confident to make changes that
could break something?

    Version control lets me return to a previous state with ease which mean I can focus on the work
at hand and not have to worry about making a mistake because it can be rectified.
This ability allows me to be more confident to make any changes nescessary.


Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here